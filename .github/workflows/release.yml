name: Attach Sui binaries to a release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      sui_tag:
        description: 'Sui repo tag to build from'
        type: string
        required: true

env:
  TAG_NAME: "${{ github.event.inputs.sui_tag || github.ref }}"
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  release-build:
    timeout-minutes: 80
    strategy:
      matrix:
        os: [ windows-ghcloud, ubuntu-ghcloud, macos-latest-xl, macos-arm64-self-hosted ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # pin@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Clean up tag name ${{ env.TAG_NAME }}
        shell: bash
        run: | 
          echo "sui_tag=$(echo ${{ env.TAG_NAME }} | sed s/'refs\/tags\/'//)" >> $GITHUB_ENV

      - name: Checking out ${{ env.sui_tag }}
        if: ${{ env.sui_tag != 'main' }}
        uses: actions/checkout@v3
        with:
          ref: ${{ env.sui_tag }}

      - name: Setup caching
        uses: bmwill/rust-cache@v1 # Fork of 'Swatinem/rust-cache' which allows caching additional paths          
      
      - name: Install nexttest (Windows)
        if: ${{ matrix.os == 'windows-ghcloud' && env.sui_tag != 'main'  }}
        uses: taiki-e/install-action@nextest

      - name: Setup protoc (Windows)
        if: ${{ matrix.os == 'windows-ghcloud' && env.sui_tag != 'main'  }}
        uses: arduino/setup-protoc@v1
        # this avoids rate-limiting
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install postgres (Windows)
        if: ${{ matrix.os == 'windows-ghcloud' && env.sui_tag != 'main'  }}
        shell: bash
        run: |
          choco install postgresql12 --force --params '/Password:root'
          echo "C:\Program Files\PostgreSQL\12\bin" >> $GITHUB_PATH
          echo "C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_PATH
          echo "PQ_LIB_DIR=C:\Program Files\PostgreSQL\12\lib" >> $GITHUB_ENV
          echo "PG_DATABASE_URL=postgres://postgres:root@localhost/" >> $GITHUB_ENV
          echo "PG_EXAMPLE_DATABASE_URL=postgres://postgres:root@localhost/diesel_example" >> $GITHUB_ENV          

      - name: cargo build (release) for ${{ matrix.os }} platform
        if: ${{ env.sui_tag != 'main' }}
        shell: bash
        run: |
          [ -f ~/.cargo/env ] && source ~/.cargo/env ; cargo build --release
          cd external-crates/move && cargo build -p move-analyzer --release

      - name: Rename binaries for ${{ matrix.os }}
        if: ${{ env.sui_tag != 'main' && matrix.os != 'windows-ghcloud' }}
        shell: bash
        run: |
          export arch=$(uname -m)
          export system_os=$(echo ${{ matrix.os }} | cut -d- -f1)
          export os_type="${system_os}-${arch}"
          echo "os_type=${system_os}-${arch}" >> $GITHUB_ENV
          mv ./target/release/sui ./target/release/sui-${os_type}
          mv ./target/release/sui-node ./target/release/sui-node-${os_type}
          mv ./target/release/sui-tool ./target/release/sui-tool-${os_type}
          mv ./target/release/sui-faucet ./target/release/sui-faucet-${os_type}
          mv ./target/release/sui-test-validator ./target/release/sui-test-validator-${os_type}
          mv ./target/release/sui-indexer ./target/release/sui-indexer-${os_type}
          mv ./external-crates/move/target/release/move-analyzer ./external-crates/move/target/release/move-analyzer-${os_type}
          tar -cvzf ./target/release/sui-${{ env.sui_tag }}-${os_type}.tgz ./target/release/sui*-${os_type}* ./external-crates/move/target/release/move-analyzer-${os_type}
          [[ ${{ env.sui_tag }} == *"mainnet"* ]] && aws s3 cp ./target/release/sui-${{ env.sui_tag }}-${os_type}.tgz s3://sui-releases/releases/sui-${{ env.sui_tag }}-${os_type}.tgz || true
      #     sha256sum target/release/sui-${{ env.sui_tag }}-${os_type}.tgz > sui-${{ env.sui_tag }}-${os_type}.sha256

      # - name: Upload SHA256 checksums as artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: sha256-${{ matrix.os }}
      #     path: sui-${{ env.sui_tag }}-${{ matrix.os }}.sha256

      - name: Rename binaries for Windows
        if: ${{ env.sui_tag != 'main' && matrix.os == 'windows-ghcloud' }}
        shell: bash
        run: |
          export arch=$(uname -m)
          export os_type="windows-${arch}"
          echo "os_type=${os_type}" >> $GITHUB_ENV
          mv ./target/release/sui.exe ./target/release/sui-${os_type}.exe
          mv ./target/release/sui-node.exe ./target/release/sui-node-${os_type}.exe
          mv ./target/release/sui-tool.exe ./target/release/sui-tool-${os_type}.exe
          mv ./target/release/sui-faucet.exe ./target/release/sui-faucet-${os_type}.exe
          mv ./target/release/sui-test-validator.exe ./target/release/sui-test-validator-${os_type}.exe
          mv ./target/release/sui-indexer.exe ./target/release/sui-indexer-${os_type}.exe
          mv ./external-crates/move/target/release/move-analyzer.exe ./external-crates/move/target/release/move-analyzer-${os_type}.exe
          tar -cvzf ./target/release/sui-${{ env.sui_tag }}-${os_type}.tgz ./target/release/sui*-${os_type}* ./external-crates/move/target/release/move-analyzer-${os_type}.exe
          [[ ${{ env.sui_tag }} == *"mainnet"* ]] && aws s3 cp ./target/release/sui-${{ env.sui_tag }}-${os_type}.tgz s3://sui-releases/releases/sui-${{ env.sui_tag }}-${os_type}.tgz || true

      - name: Upload release artifacts for ${{ matrix.os }} platform
        if: ${{ env.sui_tag != 'main' }}
        uses: actions/upload-artifact@v3
        with:
          name: sui-binaries-${{ matrix.os }}
          if-no-files-found: error
          path: |
            ./target/release/sui-${{ env.sui_tag }}-${{ env.os_type }}.tgz

      - name: Publish binaries for ${{ env.sui_tag }} release
        if: ${{ env.sui_tag != 'main' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.sui_tag }}
          files: |
            ./target/release/sui-${{ env.sui_tag }}-${{ env.os_type }}.tgz

  update-formula:
    needs: release-build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Clean up tag name ${{ env.TAG_NAME }}
        shell: bash
        run: | 
          echo "sui_tag=$(echo ${{ env.TAG_NAME }} | sed s/'refs\/tags\/'//)" >> $GITHUB_ENV

      # Download all artifacts from the previous job
      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Fetch Ubuntu x86_64 Binary and Compute SHA256
        shell: bash
        run: |
          echo "sha256_ubuntu_release=$(sha256sum sui-binaries-ubuntu-ghcloud)" >> $GITHUB_ENV
          echo "sha256_macos_arm_release=$(sha256sum sui-binaries-macos-latest-xl)" >> $GITHUB_ENV
          echo "sha256_macos_x86_release=$(sha256sum sui-binaries-macos-arm64-self-hosted)" >> $GITHUB_ENV
          
    # Install Jinja2 for templating
      - name: Install Jinja2
        run: pip install jinja2

      - name: Apply Jinja2 Template and Update Formula
        run: |
          python3 - <<EOF
          import jinja2
          import os

          # Load the template
          template_loader = jinja2.FileSystemLoader(searchpath="./nre/homebrew")
          template_env = jinja2.Environment(loader=template_loader)
          template = template_env.get_template("sui.rb.j2")

          version = "${{ env.sui_tag }}"

          # Render the template with variables
          output = template.render(
              version=version,
              linux_sha256=${sha256_ubuntu_release},
              macos_intel_sha256=${sha256_macos_x86_release},
              macos_arm_sha256=${sha256_macos_arm_release}
          )

          # Write the output to the formula file
          with open("sui.rb", "w") as file:
            file.write(output)
          EOF


      # Upload the updated formula file as an artifact
      - name: Upload Formula as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: updated-formula
          path: sui.rb

      # Checkout Target Repository
      - name: Checkout Target Repository
        uses: actions/checkout@v2
        with:
          repository: mystenlabs/homebrew-tap
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: homebrew-tap

      # Download the artifact in the target repository
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: updated-formula
          path: homebrew-tap/Formula

      # Commit and Push to Target Repository
      - name: Commit and Push to Target Repository
        uses: github-actions-x/commit@v2.9
        with:
          github-token: ${{ secrets.TARGET_REPO_TOKEN }}
          commit-message: "Update Homebrew formula for new release"
          files: homebrew-mylocaltap/Formula/sui.rb
          repository: mystenlabs/homebrew-tap
          branch: main  # or your target branch
>>>>>>> d43e16997d (initial prototype for auto-updating homebrew tap)
